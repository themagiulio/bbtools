#!/usr/bin/env python3
# Description: This script aligns a structure to a reference one considering only the common residues within a selection that, by default, consists of all CA.
# Version: 2024.12
# Author: Giulio De Matteis
# Usage: ./matchmaker -r <reference_structure> -m <mobile_structure> -sr <reference_structure_sel_str> -sm <mobile_structure_sel_str>

import warnings

warnings.filterwarnings("ignore")

import argparse
import os
import MDAnalysis as mda
from Bio import pairwise2
from MDAnalysis.analysis import align

custom_residue_map = {
    "ALA": "A",
    "CYS": "C",
    "ASP": "D",
    "GLU": "E",
    "PHE": "F",
    "GLY": "G",
    "HIS": "H",
    "ILE": "I",
    "LYS": "K",
    "LEU": "L",
    "MET": "M",
    "ASN": "N",
    "PRO": "P",
    "GLN": "Q",
    "ARG": "R",
    "SER": "S",
    "THR": "T",
    "VAL": "V",
    "TRP": "W",
    "TYR": "Y",
    "HIP": "H",
    "HIE": "H",
    "HID": "H",
}

if __name__ == "__main__":
    # Argument parser
    parser = argparse.ArgumentParser()

    # Define arguments
    parser.add_argument("-r", help="Reference structure file.", type=str, required=True)
    parser.add_argument("-m", help="Mobile structure file.", type=str, required=True)
    parser.add_argument("-sr", help="Reference's atoms selection.", type=str, default="name CA")
    parser.add_argument("-sm", help="Mobile's atoms selection.", type=str, default="name CA")

    # Parse arguments
    args = parser.parse_args()

    # Create reference universe
    u1 = mda.Universe(args.r)

    # Create mobile universe
    u2 = mda.Universe(args.m)

    # Select residues
    sel1_residues = u1.select_atoms(args.sr).residues
    sel2_residues = u2.select_atoms(args.sm).residues

    # Get primary sequence
    seq1 = "".join(
        [custom_residue_map.get(residue.resname, "X") for residue in sel1_residues]
    )
    seq2 = "".join(
        [custom_residue_map.get(residue.resname, "X") for residue in sel2_residues]
    )

    # Align sequences
    alignments = pairwise2.align.globalxx(seq1, seq2)
                                                                                                                                                                    
    # Get best alignment
    alignment = alignments[0]

    seq1_aligned = alignment[0]
    seq2_aligned = alignment[1]

    # Get "common" residues (residues can be different)
    resid1_residues_aligned = []
    resid2_residues_aligned = []

    i = 0
    j = 0

    for a1, a2 in zip(seq1_aligned, seq2_aligned):
        if a1 == a2:
            # Match
            resid1_residues_aligned.append(sel1_residues[i].resid)
            resid2_residues_aligned.append(sel2_residues[j].resid)
            i += 1
            j += 1
        elif a1 != a2 and a1 != "-" and a2 != "-":
            # Mismatch
            resid1_residues_aligned.append(sel1_residues[i].resid)
            resid2_residues_aligned.append(sel2_residues[j].resid)
            i += 1
            j += 1
        else:
            # Gap
            if a2 == "-":
                i += 1

            if a1 == "-":
                j += 1


    # Make sel str
    sel1_str = args.sr + " and resid " + " ".join(map(str, resid1_residues_aligned))
    sel2_str = args.sm + " and resid " + " ".join(map(str, resid2_residues_aligned))

    # Align mobile (2) to reference (1)
    align.alignto(
        u2, u1,
        match_atoms=False,
        select={
            "reference": sel1_str,
            "mobile": sel2_str,
        },
    )

    # Write output
    name, ext = os.path.splitext(args.m)
    u2.atoms.write(name + "_aligned.pdb")

    print("Done!")
